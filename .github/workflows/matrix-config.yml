name: Matrix config

on:
  workflow_call:
    inputs:
      config:
        description: >-
          Path to your JSON config file.
          Windows directory seperators (`\`) are not supported, be sure to use POSIX directory seperators (`/`).
          Example: `.github/deploy/dev.json`
        type: string
        required: true

      extend:
        description: >-
          Additional key/value pairs to bind to each item in matrix config's `include` array.

          For exmple: '{ "prop1": "value1", "prop2": "value2" }'

          If a key already exists, its value will be overwritten (for each item in the include array).

          If the provided value for extend is a flat array (e.g. `'["one", "two", "three"]'`), then
          the matrix is also assumed to be a flat array, and the new values will simply be appended
          to the existed matrix array.

          The provided value must be a valid JSON string.
        type: string
        required: false

      no-sparse-checkout:
        description: >-
          Do not use sparse checkout to fetch the config file from the repository.
          The default behavior is to only checkout the config file specified in the `config` input,
          and not the entire repository.
        type: boolean
        required: false
        default: false

    outputs:
      matrix:
        description: >-
          A JSON string that can be used as a job's [matrix strategy](https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs) configuration.
          Be sure parse the output to a JSON object (using `fromJson()` expression) when injecting into your job's stategy matrix.
        value: ${{ jobs.matrix-config.outputs.matrix }}

jobs:
  matrix-config:
    name: Matrix config
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Ensure only POSIX directory seperators
        if: ${{ !fromJson(inputs.no-sparse-checkout) && contains(inputs.config, '\') }}
        shell: pwsh
        run: |
          echo "::error title=âœ˜ Invalid directory seperators::Sparse checkout does not support Windows directory seperators (back slashes), use forward slashes instead."
          exit 1

      - name: Trim leading relative path qualifier
        id: trim-path
        if: ${{ !fromJson(inputs.no-sparse-checkout) && startsWith(inputs.config, './') }}
        shell: pwsh
        run: |
          $path = [Regex]::Replace('${{ inputs.config }}', '^\.\/', '')
          Write-Output "path=$($path)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8NoBOM -Append

      - name: Checkout config file
        uses: actions/checkout@main
        if: ${{ !fromJson(inputs.no-sparse-checkout) }}
        with:
          sparse-checkout: |
            ${{ steps.trim-path.outputs.path }}
          sparse-checkout-cone-mode: false

      - name: Checkout repository
        uses: actions/checkout@main
        if: ${{ fromJson(inputs.no-sparse-checkout) }}

      - name: Set matrix
        id: set-matrix
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $json = (Get-Content -Path '${{ inputs.config }}' -Raw | ConvertFrom-Json -Depth 3 | ConvertTo-Json -Compress)
          $extend = '${{ inputs.extend }}'

          if (-not ([string]::IsNullOrWhiteSpace($extend))) {
            $extend = ($extend | ConvertFrom-Json -Depth 1 | ConvertTo-Json -Compress)

            [bool]$hasInclude = (-not ([string]::IsNullOrWhiteSpace(($json | jq -c -M '. | select(.include != null)'))))
            if ($LastExitCode -ne 0) { exit $LastExitCode }

            if ($hasInclude) {
              $json = ($json | jq -c -M --argjson extend $extend '.include[] += $extend')
              if ($LastExitCode -ne 0) { exit $LastExitCode }
            }
            else {
              $json = ($json | jq -c -M --argjson extend $extend '. += $extend')
              if ($LastExitCode -ne 0) { exit $LastExitCode }
            }
          }

          Write-Output "matrix=$($json)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8NoBOM -Append
